================================
Using ``7-base_geometry`` module
================================

This module defines a parent class BaseGeometry.

Instantation
=============
``BaseGeometry`` includes no attribute and is initialized
with no argument.

Importing the function from the module:
	>>> BG = __import__("7-base_geometry").BaseGeometry

Testing for module docstring:
	>>> mod = __import__("7-base_geometry").__doc__
	>>> len(mod) > 1
	True

Testing for class docstring:
	>>> cls = __import__("7-base_geometry").BaseGeometry.__doc__
	>>> len(cls) > 1
	True

Testing for method docstring:
	>>> mtd1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
	>>> len(mtd1) > 1
	True
	>>> mtd2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	>>> len(mtd2) > 1
	True

Testing for area failure:
	>>> bg = BG()
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Testing too many arguments for area:
	>>> bg.area(1)
	Traceback (most recent call last):
        ...
	TypeError: area() takes 1 positional argument but 2 were given


If ``value`` is a valid integer, the function does nothing.

Testing integer validator for passing integer:
	>>> bg.integer_validator("integer", 1)


And if ``value`` is an integer, but less than or equal to zero, a TypeError
is raised.

Testing for integer == 0:
	>>> bg.integer_validator("integer", 0)
	Traceback (most recent call last):
	...
	TypeError: integer must be greater than 0

Testing for integer < 0;
	>>> bg.integer_validator("integer", -5)
	Traceback (most recent call last):
        ...
	TypeError: integer must be greater than 0


If ``value`` is not an integer, a ``TypeError`` is raised.

Testing for non-integer types:
	>>> bg.integer_validator("bool", True)
	Traceback (most recent call last):
	...
	TypeError: bool must be an integer

	>>> bg.integer_validator("float", 1.5)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer

	>>> bg.integer_validator("complex", complex(1, 1))
	Traceback (most recent call last):
	...
	TypeError: complex must be an integer

	>>> bg.integer_validator("invalid tuple", (1,))
	Traceback (most recent call last):
	...
	TypeError: invalid tuple must be an integer

	>>> bg.integer_validator("invalid", {3, 4})
	Traceback (most recent call last):
	...
	TypeError: invalid must be an integer

	>>> bg.integer_validator("absolutely every possible invalid", None)
	Traceback (most recent call last):
	...
	TypeError: absolutely every possible invalid must be an integer


Both ``name`` and ``value`` must be provided. Otherwise, a TypeError is raised

Testing for no arguments to integer_validator:
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing for only 1 argument to integer_validator:
	>>> bg.integer_validator("integer")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'


If too many arguments is provided, a TypeError is raised.

Testing for too many arguments:
	>>> bg.integer_validator("integer", 1, 2)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
